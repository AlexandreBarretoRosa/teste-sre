apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "monitoring.fullname" . }}-prometheus-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "monitoring.labels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - /etc/prometheus/rules/*.yml

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      # Métricas do kube-state-metrics
      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']

      # Métricas de containers via cAdvisor (kubelet)
      - job_name: 'kubernetes-cadvisor'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - source_labels: [__address__]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?
            replacement: $1:10250
        metrics_path: /metrics/cadvisor

      # Métricas de nodes via kubelet
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      # Métricas de pods com anotações prometheus.io/scrape
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      # Métricas de services com anotações prometheus.io/scrape
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_service_name

      # Métricas do próprio Prometheus
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "monitoring.fullname" . }}-prometheus-rules
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "monitoring.labels" . | nindent 4 }}
    app.kubernetes.io/component: prometheus
data:
  rules.yml: |
    groups:
      - name: application-health
        rules:
          - alert: WhoAmIPodDown
            expr: kube_pod_status_phase{namespace="whoami", phase!="Running"} > 0
            for: 1m
            labels:
              severity: critical
              service: whoami
            annotations:
              summary: "WhoAmI pod is down"
              description: "Pod {{`{{ $labels.pod }}`}} is in {{`{{ $labels.phase }}`}} state"
          
          - alert: WhoAmIPodNotReady
            expr: kube_pod_status_ready{namespace="whoami"} == 0
            for: 2m
            labels:
              severity: warning
              service: whoami
            annotations:
              summary: "WhoAmI pod is not ready"
              description: "Pod {{`{{ $labels.pod }}`}} is not ready"
          
          - alert: WhoAmIDeploymentNotReady
            expr: kube_deployment_status_replicas_ready{namespace="whoami"} < kube_deployment_status_replicas{namespace="whoami"}
            for: 2m
            labels:
              severity: critical
              service: whoami
            annotations:
              summary: "WhoAmI deployment is not ready"
              description: "Deployment {{`{{ $labels.deployment }}`}} has {{`{{ $value }}`}} ready replicas"
          
          - alert: WhoAmIContainerRestarts
            expr: increase(kube_pod_container_status_restarts_total{namespace="whoami"}[15m]) > 2
            for: 1m
            labels:
              severity: warning
              service: whoami
            annotations:
              summary: "WhoAmI container is restarting frequently"
              description: "Container {{`{{ $labels.container }}`}} in pod {{`{{ $labels.pod }}`}} has restarted {{`{{ $value }}`}} times in the last 15 minutes"
          
          - alert: WhoAmIServiceNoEndpoints
            expr: kube_endpoint_address_available{namespace="whoami"} == 0
            for: 1m
            labels:
              severity: critical
              service: whoami
            annotations:
              summary: "WhoAmI service has no endpoints"
              description: "Service {{`{{ $labels.service }}`}} has no available endpoints"
      
      - name: cluster-health
        rules:
          - alert: NodeDown
            expr: up{job="kubernetes-nodes"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Node is down"
              description: "Node {{`{{ $labels.instance }}`}} is down"
          
          - alert: HighCPUUsage
            expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage detected"
              description: "CPU usage on {{`{{ $labels.instance }}`}} is {{`{{ $value }}`}}%"
          
          - alert: HighMemoryUsage
            expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 85
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage detected"
              description: "Memory usage on {{`{{ $labels.instance }}`}} is {{`{{ $value }}`}}%"
          
          - alert: HighDiskUsage
            expr: (node_filesystem_size_bytes - node_filesystem_avail_bytes) / node_filesystem_size_bytes * 100 > 85
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High disk usage detected"
              description: "Disk usage on {{`{{ $labels.instance }}`}} is {{`{{ $value }}`}}%"
      
      - name: monitoring-health
        rules:
          - alert: PrometheusDown
            expr: up{job="kubernetes-pods", app="prometheus"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Prometheus is down"
              description: "Prometheus pod is down"
          
          - alert: GrafanaDown
            expr: up{job="kubernetes-pods", app="grafana"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Grafana is down"
              description: "Grafana pod is down"
          
          - alert: AlertManagerDown
            expr: up{job="kubernetes-pods", app="alertmanager"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "AlertManager is down"
              description: "AlertManager pod is down"
          
          - alert: LokiDown
            expr: up{job="kubernetes-pods", app="loki"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Loki is down"
              description: "Loki pod is down"
